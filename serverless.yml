service: appsync-test
frameworkVersion: "3"
useDotenv: true

configValidationMode: error

plugins:
  - "@fabrary/serverless-appsync-plugin"

provider:
  logRetentionInDays: 3
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: test
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"

appSync: ${file(appsync/serverless-appsync-config.yml)}

resources:
  Resources:
    CardsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: cardIdentifier
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: cardIdentifier
            KeyType: HASH

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireUppercase: false
            RequireSymbols: false
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: nickname
            Required: false
            Mutable: true

    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: web
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
        UserPoolId: !Ref UserPool

    IdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        AllowUnauthenticatedIdentities: true
        AllowClassicFlow: false
        CognitoIdentityProviders:
          - ClientId: !Ref WebUserPoolClient
            ProviderName: !GetAtt UserPool.ProviderName
            ServerSideTokenCheck: true

    UnauthenticatedRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action: sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  cognito-identity.amazonaws.com:aud: !Ref IdentityPool
                ForAnyValue:StringLike:
                  cognito-identity.amazonaws.com:amr: unauthenticated
        Policies:
          - PolicyName: CognitoPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: appsync:GraphQL
                  Resource: "*"

    AuthenticatedRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action: sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  cognito-identity.amazonaws.com:aud: !Ref IdentityPool
                ForAnyValue:StringLike:
                  cognito-identity.amazonaws.com:amr: authenticated
        Policies:
          - PolicyName: CognitoPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: appsync:GraphQL
                  Resource: "*"

    IdentityPoolRoleMapping:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId: !Ref IdentityPool
        Roles:
          authenticated: !GetAtt AuthenticatedRole.Arn
          unauthenticated: !GetAtt UnauthenticatedRole.Arn

    AppSyncLoggingServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: appsync.amazonaws.com
              Action: sts:AssumeRole
        Path: /service-role/
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*

  Outputs:
    UserPoolId:
      Value: !Ref UserPool

    WebUserPoolClientId:
      Value: !Ref WebUserPoolClient

    IdentityPoolId:
      Value: !Ref IdentityPool
